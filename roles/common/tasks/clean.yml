---

- name: "Basic Clean-Up (ROM zip dir)"
  file:
    path: "{{ JKZIPDIR }}"
    state: absent

- name: "Cleanup old build log"
  file:
    path: "build_{{ target_model }}_{{ android_shortversion }}_{{ ROM_FLAVOR }}.log"
    state: absent

- name: "Cleanup old build log (ansible host)"
  connection: local
  file:
    path: "/tmp/{{ inventory_hostname }}/build_{{ target_model }}_{{ android_shortversion }}_{{ ROM_FLAVOR }}.log"
    state: absent

- name: "Basic Clean-Up (props, images)"
  shell: "find out/ -name {{ item }} -delete || true"
  args:
    chdir: "{{ SRCPATH }}"
  loop:
    - build.prop
    - boot.img
    - recovery.img
    - blrecovery.img
  when:
    - clean_out != "true" or (override_clean_out != "true")

- name: "Basic Clean-Up (cross-version incompatible paths)"
  file:
    state: absent
    path: "{{ SRCPATH }}/{{ item }}"
  loop:
    - build
    - cts
    - device/
    - external/libbrillo
    - frameworks/av
    - frameworks/ml
    - frameworks/native
    - frameworks/support
    - hardware/marvell
    - hardware/qcom/sm7150
    - hardware/qcom/sm7250
    - hardware/qcom/sm8150
    - hardware/qcom/sm8150p
    - hardware/qcom-caf
    - hardware/qcom/wlan
    - hardware/qcom/Android.mk    
    - kernel/
    - packages/apps/Trebuchet
    - packages/apps/Updater
    - system/core
    - system/security
    - system/sepolicy
    - test/
    - vendor/lineage
    - vendor/fdroid
    - vendor/cm
    - vendor/nxp
  when:
    - (override_clean_basic == "undef" and clean_basic == "true") or (override_clean_basic == "true")
  no_log: true

- name: "Clean-Up (cross-version incompatible REPO paths)"
  shell: >
      find .repo/project* -type d -name {{ item }} -exec rm -rf {} \;
  args:
     chdir: "{{ SRCPATH }}"
     executable: /bin/bash
  register: clurp
  failed_when: 
    - clurp.rc != 0
    - clurp.rc != 1
  loop: "{{ prob_repo_paths }}"

- name: "Clean-Up out/"
  file:
    path: "{{ SRCPATH }}/out"
    state: absent
  when:
    - (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true")
  
- name: "Clean-Up out/ ({{ SEPARATE_OUT_DIR }})"
  file:
    path: "{{ SEPARATE_OUT_DIR }}"
    state: absent
  register: rm_other_out
  when: 
    - (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true")
    - SEPARATE_OUT_DIR is defined

- name: "Re-create out/ ({{ SEPARATE_OUT_DIR }})"
  file:
    path: "{{ SEPARATE_OUT_DIR }}"
    state: directory
  when: 
    - SEPARATE_OUT_DIR is defined

- name: "Re-create out/ (link)"
  file:
    src: "{{ SEPARATE_OUT_DIR }}"
    dest: "{{ SRCPATH }}/out"
    state: link
  when: 
    - SEPARATE_OUT_DIR is defined

#- name: "Reset state for all projects"
#  shell: "{{ repo_bin }} forall -j{{ max_processes }} -vc 'git remote -v | head -n1; git reset --hard' || echo 'SKIPPING WITH ERRORCODE: $?'"
#  args:
#    chdir: "{{ SRCPATH }}"
#  when:
#    - (override_reset_git == "undef" and reset_git == "true") or (override_reset_git == "true")
#  no_log: true

- include: ../roles/common/tasks/reset.yml
  when:
    - (override_reset_git == "undef" and reset_git == "true") or (override_reset_git == "true")

- name: "Cleanup patch indicators"
  file:
    path: "{{ SRCPATH }}/.tmp/"
    state: absent
  when:
    - (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true")

- name: "Setup patch indicators dir"
  file:
    path: "{{ SRCPATH }}/.tmp/"
    state: directory

- name: "Cleanup local manifests"
  file:
    path: "{{ SRCPATH }}/.repo/local_manifests"
    state: absent
  when:
    - (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true")
