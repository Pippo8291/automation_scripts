---

- name: "Get local manifests (if set)"
  git:
    repo: "{{ git_repo_local_manifests }}"
    dest: "{{ SRCPATH }}/.repo/local_manifests"
    version: "{{ git_repo_local_manifests_branch }}"
    force: true
  when: git_repo_local_manifests is defined

- name: "Init Android sources"
  shell: "{{ repo_bin }} init -u {{ git_repo_main_manifests }} -b {{ git_repo_main_branch | d(REPOBRANCH) }}"
  args:
    chdir: "{{ SRCPATH }}"

- name: "Sync"
  shell: >
      {{ repo_bin }} sync -j{{ max_processes }} --force-sync --force-remove-dirty \
        || {{ repo_bin }} sync -j1 --force-sync --fail-fast
  args:
    chdir: "{{ SRCPATH }}"
  #no_log: true

# git lfs can be a pita! i.e. it silently fails and you have no idea where.
# the following ensures we can catch known issues or print the error path at least
- name: "Sync LFS"
  shell: >
      {{ repo_bin }} forall -j{{ max_processes }} -c 'git lfs pull || pwd | grep -E "OpenCL-CTS" '
  args:
    executable: /bin/bash
    chdir: "{{ SRCPATH }}"
  when: ROM_FLAVOR == 'eos' or (sync_lfs is defined and sync_lfs == 'true')
  no_log: true

- name: "Ensure keys dir is set correctly"
  shell: "KEYS_DIR='{{ keysdir }}' external/buildtools/sign/sign_set_keysdir.sh {{ ROM_FLAVOR | regex_replace('e-os','eos') }} {{ android_shortversion }}"
  args:
    chdir: "{{ SRCPATH }}"
  when: sign_build is defined and sign_build == "true"

- name: "Grab & write Security patch date"
  shell: |-
    grep -E 'PLATFORM_SECURITY_PATCH\s+:=\s+' build/core/version_defaults.mk| cut -d "=" -f 2 | tr -d " " > platform_sec_patch.info
  args:
    chdir: "{{ SRCPATH }}/out"
    executable: /bin/bash
