#!/bin/bash

export EOS_RELEASE_TYPE={{ EOS_RELEASE_TYPE }}
export JKZIPDIR="{{ JKZIPDIR }}"
export EOS_KEYS_DIR="{{ keysdir }}"

cd {{ SRCPATH }}
source build/envsetup.sh

if [ "{{ EOS_RELEASE_TYPE }}" == "CUSTOM" ];then

    # this will be a user build!
    lunch lineage_hotdog-user

    # enable & use extendrom
    export ENABLE_EXTENDROM=true
    export EOS_GESTURES="{{ eos_enable_gestures }}"
    
    if [ "{{ PREROOT_BOOT }}" == "true" ];then
        export MAGISK_TARGET_ARCH=arm64
        export EXTENDROM_PREROOT_BOOT=true
        export EXTENDROM_PACKAGES="noEOSappstore Lawnchair-latest F-Droid F-DroidPrivilegedExtension additional_repos.xml AuroraStore Phonesky SignMagisk"        
    else
        export EXTENDROM_PACKAGES="noEOSappstore Lawnchair-latest F-Droid F-DroidPrivilegedExtension additional_repos.xml AuroraStore Phonesky"
    fi
    
    # all the extendrom MAGIC!!
    vendor/extendrom/get_prebuilts.sh

    # Three build steps needed: build, sign, create & sign OTA
    # step 1/3:
    # build the ROM + otatools needed for signing
    mka target-files-package otatools
    
    # step 2/3:
    # sign all APKs who demands it
    ./build/tools/releasetools/sign_target_files_apks -o -d user-keys $OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip {{ JKZIPDIR }}/signed-target_files.zip
    
    # get the build ver
    VERSION_MAJOR=$(grep "PRODUCT_VERSION_MAJOR = " vendor/lineage/config/common.mk | cut -d "=" -f 2 | tr -d " ")
    VERSION_MINOR=$(grep "PRODUCT_VERSION_MINOR = " vendor/lineage/config/common.mk | cut -d "=" -f 2 | tr -d " ")
    
    # step 3/3:
    # build & sign the OTA
    ./build/tools/releasetools/ota_from_target_files -k user-keys/releasekey --block {{ JKZIPDIR }}/signed-target_files.zip {{ JKZIPDIR }}/{{ PREFIXFNAME }}${VERSION_MAJOR}.${VERSION_MINOR}-q-{{ BUILDIDENT }}-{{ EOS_RELEASE_TYPE }}-{{ BDEVICE }}-signed.zip && \
    	rm -v {{ JKZIPDIR }}/signed-target_files.zip
        
    # step 4 (OPTIONAL):
    # if you ever come into a situation where you cannot upgrade anymore due to a resize error
    # you need to disable avb-verity and enable it again. The reason is that as soon as you have ever used 
    # the "adb remount" command a partition named "scratch" will be created. Disabling verity and enabling it again
    # will remove that partition and so fix that issue.
    # BUT: this does not work on USER builds as avb-verity commands will be rejected.
    # so I found another solution which requires to build a factory image which creates a "super.img":
    # Basically it is just to set "PRODUCT_BUILD_SUPER_PARTITION := true" e.g. in your device.mk 
    # (and ensure its not set to "false" anywhere else)
    #mka superimage_dist
else
    # userdebug build is what the majority uses
    lunch lineage_{{ BDEVICE }}-userdebug
    mka eos
fi
