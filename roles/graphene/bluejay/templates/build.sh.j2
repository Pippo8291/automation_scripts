#!/bin/bash

# special handling for yarn shit
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH" 

# be strict on failures
set -e

{{ SH_GRAPHENE_GPG }}

# CCACHE
export USE_CCACHE={{ USE_CCACHE }}
if [ "{{ USE_CCACHE }}" -eq 1 ];then
    export CCACHE_COMPRESS={{ CCACHE_COMPRESS }}
    mkdir -p {{ CCACHE_DIR }}
    export CCACHE_DIR="{{ CCACHE_DIR }}"
    {{ CCACHE_EXEC }} --max-size=10G
fi

# setup build env    
cd {{ SRCPATH }}
[ -L releases ] && rm releases

source script/envsetup.sh

# extendrom
{% if use_extendrom is defined and use_extendrom == "true" %}
export ENABLE_EXTENDROM={{ use_extendrom }}
export EXTENDROM_PACKAGES="{{ extendrom_package_list }}"
vendor/extendrom/get_prebuilts.sh
{% endif %}

# verify manifests
cd {{ SRCPATH }}/.repo/manifests
git verify-tag $(git describe)
cd ../../

# The kernel needs to be built in advance, since it uses a separate build system.
# Prebuilts are provided for all the officially supported devices, so this step is optional.
# https://grapheneos.org/build#kernel-6th-generation-pixels
{% if BUILD_GOS_KERNEL is defined and BUILD_GOS_KERNEL == "true" %}
mkdir android/kernel/{{ target_model }}
cd android/kernel/{{ target_model }}
repo init -u https://github.com/GrapheneOS/kernel_{{ target_model }}-manifest.git -b {{ GOS_KERNEL_BRANCH }}
repo sync -j{{ max_processes }}
LTO=thin BUILD_KERNEL=1 ./build_{{ target_model }}.sh
cd {{ SRCPATH }}
{% endif %}

# prepare fetching blobs
source script/envsetup.sh
choosecombo release aosp_{{ target_model }} {{ lunch_buildtype }}

# fetch blobs
{% if DOWNLOAD_BLOBS is defined and  DOWNLOAD_BLOBS == "true" %}
m -j{{ max_processes }} aapt2
yarn install --cwd vendor/adevtool/
rm -rf vendor/adevtool/dl/*
vendor/adevtool/bin/run download vendor/adevtool/dl/ -d bluejay -t factory ota
sudo vendor/adevtool/bin/run generate-all vendor/adevtool/config/bluejay.yml -c vendor/state/bluejay.json -s vendor/adevtool/dl/bluejay-*-factory-*.zip
sudo chown -R ${USER}:${USER} vendor/google_devices
vendor/adevtool/bin/run ota-firmware vendor/adevtool/config/bluejay.yml -f vendor/adevtool/dl/bluejay-ota-*.zip
{% endif %}

# build id
export password=""
export BUILD_NUMBER="v{{ ROM_VERSION }}"
# BUILD_ID="{{ ROM_NAME }}_v{{ ROM_VERSION }}.$(date +%Y%m%d%H)-{{ ROM_BL_TYPE }}"
export BUILD_ID="{{ ROM_NAME }}_v{{ ROM_VERSION }}-{{ ROM_BL_TYPE }}"
sed -i "s/BUILD_ID=.*/BUILD_ID=$BUILD_ID/g" build/make/core/build_id.mk
#export GBUILDID=$(date +%Y%m%d00)

# enable/add Updater app
export OFFICIAL_BUILD=true

# build
cd {{ SRCPATH }}
source script/envsetup.sh
m -j{{ max_processes }} target-files-package otatools-package

# packaging & signing
time script/release.sh {{ target_model }}
echo -e '\n\n\t\e[32m\e[1mBUILDING '$BUILD_ID' for {{ target_model }} FINISHED SUCCESSFULLY!!\e[0m\n'

# move files
export GBUILDID=$(grep 'ro.build.version.incremental' out/target/product/{{ target_model }}/system/build.prop | cut -d = -f 2)
ln -s ../graphene_releases releases
[ ! -d "releases/${GBUILDID}" ] && mkdir releases/${GBUILDID}/

# find (the latest) previous release
PREV_GBUILDID=$(find releases/ -mindepth 1 -maxdepth 1 -type d | sort | tail -n 1 | cut -d '/' -f 2)
mv out/release-{{ target_model }}-${GBUILDID} releases/${GBUILDID}/

# create incremental / delta updates
unset DELTABUILD
if [ ! -z "${PREV_GBUILDID}" -a "${PREV_GBUILDID}" -lt "${GBUILDID}" ];then
    script/generate_delta.sh {{ target_model }} ${PREV_GBUILDID} ${GBUILDID}
    DELTABUILD="releases/${GBUILDID}/{{ target_model }}-incremental-${PREV_GBUILDID}-${GBUILDID}.zip"
else
    echo "... skipping delta as PREV_GBUILDID (${PREV_GBUILDID}) is empty / does not exist or is not lower then GBUILDID (${GBUILDID})"
fi

# release
scp releases/${GBUILDID}/release-{{ target_model }}-${GBUILDID}/{{ target_model }}-ota_update-${GBUILDID}.zip \
    releases/${GBUILDID}/release-{{ target_model }}-${GBUILDID}/{{ target_model }}-factory-${GBUILDID}.zip \
    $DELTABUILD \
    {{ custom_release_server }}:{{ custom_release_server_path }}

# cleanup prev delta build
if [ ! -z "$DELTABUILD" ] && [ -d "releases/${PREV_GBUILDID}" ] ;then
    rm -rfv releases/${PREV_GBUILDID} && echo "... deleted previous delta files: ${PREV_GBUILDID}"
else
    echo "... skipping previous delta cleanup (seems no releases/${PREV_GBUILDID} exists) "
fi

echo -e '\nYou can find the build here: releases/${GBUILDID}/\n\n'
