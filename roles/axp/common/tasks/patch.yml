---

- name: "disable GPG verify if dirty build"
  ansible.builtin.lineinfile:
    path: "{{ DOSPATH }}/Scripts/LineageOS-{{ los_version }}/Functions.sh"
    line: '#verifyAllPlatformTag'
    regexp: '\s+verifyAllPlatformTags\;'
  when:
    - clean_out != "true" or (override_clean_out != "true") or (skip_gpg_verify | bool)

- name: "apply DOS patches"
  raw: |
    export BDEVICE="{{ target_model }}" PATH="{{ BUILDHOME }}/.yarn/bin:{{ BUILDHOME }}/.config/yarn/global/node_modules/.bin:{{ BUILDHOME }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    cd {{ SRCPATH }}
    source ~/.bashrc
    source build/envsetup.sh  && echo "sourcing envsetup: success" \
      && source {{ DOSPATH }}/Scripts/init.sh  && echo "sourcing init: success"
    patchWorkspace >> {{ BUILD_LOG }} 2>&1 \
      && awk -i inplace '!/enforce-product-packages-exist-internal/' vendor/lineage/config/common.mk
  register: patchout
  args:
    executable: /bin/bash

#- name: "apply DOS patches"
#  shell: |
#    source ~/.bashrc
#    source build/envsetup.sh  && echo "sourcing envsetup: success" \
#      && source {{ DOSPATH }}/Scripts/init.sh  && echo "sourcing init: success"
#    patchWorkspace >> {{ BUILD_LOG }} 2>&1 \
#      && awk -i inplace '!/enforce-product-packages-exist-internal/' vendor/lineage/config/common.mk
#  register: patchout
#  #failed_when: "'No error detected' not in patchout.stdout"
#  environment:
#    BDEVICE: "{{ target_model }}"
#    PATH: "{{ BUILDHOME }}/.yarn/bin:{{ BUILDHOME }}/.config/yarn/global/node_modules/.bin:{{ BUILDHOME }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#  args:
#    chdir: "{{ SRCPATH }}"
#    executable: "/bin/bash"

# AXP.OS adjustments (e.g wireguard, OTA,..)
- name: "apply AXP.OS adjustments"
  raw: |
    export BDEVICE="{{ target_model }}" PATH="{{ BUILDHOME }}/.yarn/bin:{{ BUILDHOME }}/.config/yarn/global/node_modules/.bin:{{ BUILDHOME }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    cd {{ SRCPATH }}
    source ~/.bashrc
    source build/envsetup.sh \
      && source {{ DOSPATH }}/Scripts/init.sh \
      && lunch lineage_{{ target_model }}-user && echo lunch success \
      && vendor/axp/axp.sh
  args:
    executable: /bin/bash

#- name: "apply AXP.OS adjustments"
#  shell: |
#    source ~/.bashrc
#    source build/envsetup.sh \
#      && source {{ DOSPATH }}/Scripts/init.sh \
#      && lunch lineage_{{ target_model }}-user && echo lunch success \
#      && vendor/axp/axp.sh
#  environment:
#    BDEVICE: "{{ target_model }}"
#    PATH: "{{ BUILDHOME }}/.yarn/bin:{{ BUILDHOME }}/.config/yarn/global/node_modules/.bin:{{ BUILDHOME }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
#  args:
#    chdir: "{{ SRCPATH }}"
#    executable: "/bin/bash"

- name: "apply AXP.OS patches (common)"
  raw: |
      export BDEVICE="{{ target_model }}" PATH="{{ BUILDHOME }}/.yarn/bin:{{ BUILDHOME }}/.config/yarn/global/node_modules/.bin:{{ BUILDHOME }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      cd {{ SRCPATH }}
      source ~/.bashrc
      source build/envsetup.sh \
        && source {{ DOSPATH }}/Scripts/init.sh \
        && vendor/extendrom/tools/apply_patches.sh vendor/axp/patches/common
  args:
    executable: /bin/bash

#- name: "apply AXP.OS patches (common)"
#  shell: |
#      source ~/.bashrc
#      source build/envsetup.sh \
#        && source {{ DOSPATH }}/Scripts/init.sh \
#        && vendor/extendrom/tools/apply_patches.sh vendor/axp/patches/common
#  args:
#    chdir: "{{ SRCPATH }}"
#    executable: "/bin/bash"
