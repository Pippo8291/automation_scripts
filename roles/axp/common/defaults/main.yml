---

# git stuff
axp_git_repo: "git@github.com:AXP-OS/build.git"
axp_main_branch: latest
git_repo_local_manifests: "https://github.com/AXP-OS/manifest.git"
git_repo_local_manifests_branch: "{{ ROM_FLAVOR }}-{{ android_shortversion }}"
# main LOS manifest
git_repo_main_manifests: "https://github.com/LineageOS/android.git"

# build vars
os_name: "AXP.OS" 
los_version: "{{ android_shortversion | replace('a13','20.0') | replace('a12','19.1') | replace('a11','18.1') | replace('a10','17.1') | replace('a9','16.0') }}"
git_repo_main_branch: "lineage-{{ los_version }}"
DOSPATH: "/home/androidsource/do-not-touch/{{ ROM_FLAVOR }}"
# SRCPATH HAS TO be part of DOSPATH - this is a divestOS limitation and cannot be changed
# If you need to use a different path for any reason you can use symlinks for the "LineageOS-XX" folders
# but ensure you leave the directory structure intact then
SRCPATH: "{{ DOSPATH }}/Build/LineageOS-{{ los_version }}"
axp_finalzip_dir: "{{ ZIPDIR }}/LineageOS-{{ los_version }}/release_keys/"
USE_CCACHE: 1
rempath: "/home/nightlies/roms/{{ ROM_FLAVOR }}/{{ target_model }}/"
RELEASE_TYPE: dos
ROM_VERSION: "{{ build_id }}"
PREFIXFNAME: "{{ os_name }}-{{ los_version }}"
# if set to true (in your env or anywhere else) an -eng build will be created instead of a -user one
axp_build_eng: false
# directories to be cleaned on a clean build
axp_clean_paths:
    - "{{ SRCPATH }}/DOS_PATCHED_FLAG"
    - "{{ SRCPATH }}/packages/apps/Fennec_DOS-Shim"
    - "{{ SRCPATH }}/vendor/divested"
    - "{{ SRCPATH }}/vendor/fdroid_prebuilt"
    - "{{ SRCPATH }}/packages/apps/SupportDivestOS"
    - "{{ SRCPATH }}/vendor/oneplus"
    - "{{ SRCPATH }}/vendor/samsung"
    - "{{ SRCPATH }}/hardware/oplus"
    - "{{ SRCPATH }}/hardware/samsung"
    - "{{ SRCPATH }}/external/firebase-messaging"
    - "{{ SRCPATH }}/kernel"
    - "{{ SRCPATH }}/device"

# extendrom stuff
use_extendrom: "true"
extendrom_package_list: "additional_repos.xml Phonesky_AXP-OS Magisk AuroraServices AuroraStore MicrogGmsCore_GH GsfProxy_GH noeSpeakNG NeoLauncher-latest"
extendrom_fdroid_repos: "microg.xml molly.xml nailyk.xml threema.xml"
extendrom_preroot_boot: "true"
extendrom_signature_spoofing: "true"
#extendrom_sigspoof_force_dir: "vendor/extendrom/config/sigspoof/{{ ROM_FLAVOR }}/{{ android_shortversion | upper() }}"
#sh: export EXTENDROM_SIGSPOOF_FORCE_PDIR={{ extendrom_sigspoof_force_dir }}
extendrom_patcher_reset: "false"  # as this resets divest patches (e.g. boot animation)
extendrom_boot_debug: "true"
extendrom_signing_patches: 'true'

# keys
KEYS_CN: "{{ os_name }}"
KEYS_SIZE: 8192
KEYS_HASHTYPE: sha512
keysdir: "{{ DOSPATH }}/Signing_Keys/4096pro/{{ target_model }}/"

# notification vars
ota_hint: |-
  ***OTA Update:*** supported

rom_cl: |-
  ***Changes:***
  \- divestOS: [Changelog](https://divestos.org/pages/news)
  \- AXP\.OS: [Changelog](https://axp.binbash.rocks/dl.html)

dl_links: |-
  ***Download:*** [{{ ROMFILE.stdout | regex_escape() }} ]({{ leech_server }}/{{ ROM_FLAVOR }}/{{ target_model }})

device_cl: |-
  ***{{ target_model_full | regex_escape() }}*** ***\({{ target_model | regex_escape() }}\)*** \- ***{{ ROM_FLAVOR | regex_escape() }}***

# Divest has some very weird behavior as it is only compatible with fedora officially
# one of the reasons is that /bin/sh points to /bin/bash there and divest uses /bin/sh
# everywhere(no idea why!) and another example is the tool "rename" which is different
# in fedora then in other distros (at least Ubuntu). The following fixes all known issues
# with divest due to its non-standard behavior and inits DOS as it should be
DOS_INIT: |
    echo "BUILDHOME: {{ BUILDHOME }}"
    export HOME="{{ BUILDHOME }}" && echo "home set to $HOME"
    export BDEVICE="{{ target_model }}"
    export PATH="{{ BUILDHOME }}/.local/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    if [ ! -L "$HOME/.local/bin/sh" ];then ln -s /bin/bash $HOME/.local/bin/sh; fi
    if [ ! -L "$HOME/.local/bin/rename" ];then ln -s {{ SRCPATH }}/rename $HOME/.local/bin/rename; fi
    alias sh=/bin/bash
    alias rename="{{ SRCPATH }}/rename"
    cd {{ SRCPATH }}
    source build/envsetup.sh && echo "sourcing envsetup: success"
    source {{ DOSPATH }}/Scripts/init.sh && echo "sourcing init: success"

# the build script which will be executed after all the resets, syncs and patching have been done
SH_COMMON_BUILD_SNIPPET: |
        #!/bin/bash
        ####################################################################################################################
        
        # be strict on failures
        set -e

        # fix build errors
        export LC_ALL=C
        
        # unset any extendrom var
        unset EXTENDROM_DEBUG_PATH EXTENDROM_BOOT_DEBUG EXTENDROM_PREROOT_BOOT ENABLE_EXTENDROM EXTENDROM_PACKAGES PREROOT_BOOT
        unset EXTENDROM_DEBUG_PATH_SIZE_FULL EXTENDROM_DEBUG_PATH_SIZE_KERNEL EXTENDROM_DEBUG_PATH_SIZE_SELINUX 
        unset EXTENDROM_DEBUG_PATH_SIZE_CRASH EXTENDROM_SIGNATURE_SPOOFING EXTENDROM_SIGSPOOF_FORCE_PDIR EXTENDROM_PATCHER_RESET
        unset EXTENDROM_SIGNING_PATCHES EXTENDROM_PACKAGES_SKIP_DL
        
        ########################### BUILD #########################
        
        # setup build env including stupid DOS workarounds
        {{ DOS_INIT }}
        {% if axp_build_eng | bool %}
        breakfast lineage_{{ target_model }}-eng
        {% else %}
        breakfast lineage_{{ target_model }}-user
        {% endif %}
        
        # CCACHE
        export USE_CCACHE={{ USE_CCACHE }}
        if [ "{{ USE_CCACHE }}" -eq 1 ];then
            export CCACHE_EXEC=/usr/bin/ccache
            export CCACHE_COMPRESS={{ CCACHE_COMPRESS }}
            mkdir -p {{ CCACHE_DIR }}
            export CCACHE_DIR="{{ CCACHE_DIR }}"
            {{ CCACHE_EXEC }} --max-size=10G
        fi
        
        # extendrom flags
        export ENABLE_EXTENDROM={{ use_extendrom }}
        export EXTENDROM_PACKAGES="{{ extendrom_package_list }}"
        export EXTENDROM_FDROID_REPOS="{{ extendrom_fdroid_repos }}"
        {% if extendrom_packages_skip_dl is defined %}export EXTENDROM_PACKAGES_SKIP_DL={{ extendrom_packages_skip_dl }}{% endif %}
        export EXTENDROM_PREROOT_BOOT={{ extendrom_preroot_boot }}
        export MAGISK_TARGET_ARCH=arm64
        export EXTENDROM_BOOT_DEBUG={{ extendrom_boot_debug }}
        export EXTENDROM_DEBUG_PATH={{ extendrom_debug_path |d (extendrom_debug_path_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_FULL={{ extendrom_debug_path_size_full | d(extendrom_debug_path_size_full_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_KERNEL={{ extendrom_debug_path_size_kernel | d(extendrom_debug_path_size_kernel_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_SELINUX={{ extendrom_debug_path_size_selinux | d(extendrom_debug_path_size_selinux_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_CRASH={{ extendrom_debug_path_size_crash | d(extendrom_debug_path_size_crash_default) }}
        export EXTENDROM_SIGNATURE_SPOOFING={{ extendrom_signature_spoofing }}
        export EXTENDROM_PATCHER_RESET={{ extendrom_patcher_reset }}
        export EXTENDROM_SIGNING_PATCHES={{ extendrom_signing_patches }}
        # execute extendrom
        vendor/extendrom/er.sh
        
        # build
        {% if (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true") %}
        mka generate_verity_key \
         && mka sepolicy && \
        {% endif %}
        {% if axp_build_eng | bool %}
         buildDeviceDebug {{ target_model }}
        {% else %}
         buildDevice {{ target_model }}
        {% endif %}
